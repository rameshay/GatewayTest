
/*
 * Multi users using multiple robots
 */


// SimpleContent defines properties of content that the server generates;
// if you get no hits, set SimpleContent.obj_life_cycle to cntStatic, which
// is defined in workloads/include/contents.pg
Content SimpleContent = {
        size = const(64KB); // response sizes distributed constantly
        //size = const(6Byte);
        cachable = 80%;   // 20% of content is uncachable
};


AddrMap map = {
           addresses = [ '10.0.15.60:443' ];
           names = [ 'www.box.com'];
};

use (map);


DnsResolver dr = {
    servers = [ '10.0.15.60:53' ];
    timeout = 5sec;
};


SslWrap wrap = {
        protocols = [ "any" ];
        ciphers = [ "ALL:!DES-CBC-SHA:!EXP-DES-CBC-SHA:!EXP-RC4-MD5:!EXP-RC2-CBC-MD5:" : 100% ];

        rsa_key_sizes = [ 512bit, 1024bit, 2048bit ];
        session_resumption = 40%;
        session_cache = 100;
        verify_peer_certificate = false;
};


// a primitive server cleverly labeled "S101"
// normally, you would specify more properties,
// but we will mostly rely on defaults for now
Server S = {
	kind = "S101";
	contents = [ SimpleContent ];
	direct_access = contents;
	addresses = ['10.0.15.60:443' ]; // where to create these server agents
	ssl_wraps = [ wrap ];
};


Phase phRampUp = { name = "rampup"; goal.duration = 1min; populus_factor_beg = 0; populus_factor_end = 1;};
Phase phRampDown = { name = "rampdown"; goal.duration = 1min; populus_factor_beg = 1; populus_factor_end = 0;};
Phase phSustain = { name = "sustain"; goal.duration = 60min; populus_factor_beg = 1; populus_factor_end = 1;};

// build schedule using some well-known phases and phases defined above
schedule(phRampUp,
         phSustain,
         phRampDown);

//schedule(phRampUp,
//         phSustain);

// robots

Robot R1 = {

        pop_model = { pop_distr = popUnif(); };
        recurrence = 55% / SimpleContent.cachable; // adjusted to get 55% DHR
        origins = map.names;      // where the origin servers are
        dns_resolver = dr;
        ssl_wraps = [ wrap ];
        
        MimeHeader user1 = 'ELASTICA_MAGIC_COOKIE: 430266004794:stresstest.user1@elastica.co';
        http_headers = [user1: 100%];
        addresses = ['10.0.15.59' ** 1 ]; // where these robot agents will be created
};
Robot R2 = {

        pop_model = { pop_distr = popUnif(); };
        recurrence = 55% / SimpleContent.cachable; // adjusted to get 55% DHR
        origins = map.names;      // where the origin servers are
        dns_resolver = dr;
        ssl_wraps = [ wrap ];
        
        MimeHeader user2 = 'ELASTICA_MAGIC_COOKIE: 430266004794:stresstest.user2@elastica.co';
        http_headers = [user2: 100%];
        addresses = ['10.0.15.59' ** 1 ]; // where these robot agents will be created
};
// commit to using these servers and robots
use(S,R1,R2);
