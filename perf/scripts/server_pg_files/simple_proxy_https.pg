/*
 * A very simple "Hello, World!" workload
 */

// this is just one of the simplest workloads that can produce hits
// never use this workload for benchmarking


// SimpleContent defines properties of content that the server generates;
// if you get no hits, set SimpleContent.obj_life_cycle to cntStatic, which
// is defined in workloads/include/contents.pg
Content SimpleContent = {
	//size = const(6Byte); // response sizes distributed constantly
        size = const(64KB);
        cachable = 80%;   // 20% of content is uncachable
//        cachable = 100%;    // 0% of content is uncachable 
};


DnsResolver dr = {
    servers = [ '10.0.15.60:53' ];
    timeout = 5sec;
};

SslWrap wrap = {
        protocols = [ "any" ];
        root_certificate = "/home/srangan/boxcom.pem";
	//ciphers = [ "ALL:HIGH:" : 100% ];
	ciphers = [ "ALL:!DES-CBC-SHA:!EXP-DES-CBC-SHA:!EXP-RC4-MD5:!EXP-RC2-CBC-MD5:" : 100% ];

        rsa_key_sizes = [ 512bit, 1024bit, 2048bit ];
        session_resumption = 40%;
        session_cache = 100;
	verify_peer_certificate = false;	
};

// a primitive server cleverly labeled "S101"
// normally, you would specify more properties,
// but we will mostly rely on defaults for now
Server S = {
	kind = "S101"; 
	contents = [ SimpleContent ];
	direct_access = contents;

	addresses = ['10.0.15.60:443' ]; // where to create these server agents
	ssl_wraps = [ wrap ];
        
        //http_versions = [ "1.0" ];  // newer agents use HTTP/1.1 by default
        //pconn_use_lmt = const(2147483647).; // Persistent connections - should tune this value
        //idle_pconn_tout = 60 min;
        //xact_think = unif(250msec, 500msec);
        //xact_think = const(250msec);
};

// a 1:1 map
AddrMap M = {
    names = [ 'www.box.com' ];
    //addresses = S.addresses;
    addresses = [ '10.0.15.60:80', '10.0.15.60:443' ];
};


// a primitive robot
Robot R = {
	kind = "R101";
	pop_model = { pop_distr = popUnif(); };
	recurrence = 55% / SimpleContent.cachable; // adjusted to get 55% DHR
        //recurrence = 55%;        
        
        MimeHeader user1 = 'ELASTICA_MAGIC_COOKIE: 271577132736:stresstest.user2@elastica.co';
        http_headers = [user1: 100%];
      
	origins = S.addresses;      // where the origin servers are
	addresses = ['10.0.0.254' **25 ]; // where these robot agents will be created
};


Robot R1 = {
        kind = "R102";
        pop_model = { pop_distr = popUnif(); };
        recurrence = 55% / SimpleContent.cachable; // adjusted to get 55% DHR
        origins = S.addresses;      // where the origin servers are

        MimeHeader user2 = 'ELASTICA_MAGIC_COOKIE: 271577132736:stresstest.user2@elastica.co';
        http_headers = [user2: 100%];
        addresses = ['10.0.0.254' ** 25 ]; // where these robot agents will be created
        dns_resolver = dr;
        ssl_wraps = [ wrap ];
};

Robot R2 = {
        kind = "R103";
        pop_model = { pop_distr = popUnif(); };
        recurrence = 55% / SimpleContent.cachable; // adjusted to get 55% DHR
        origins = S.addresses;       // where the origin servers are

        MimeHeader user3 = 'ELASTICA_MAGIC_COOKIE: 271577132736:stresstest.user3@elastica.co';
        //MimeHeader user3 = 'ELASTICA_MAGIC_COOKIE: 494:stresstest.user3@elastica.co';
        http_headers = [user3: 100%];
        addresses = ['10.0.0.254' ** 25 ]; // where these robot agents will be created
        dns_resolver = dr;
        ssl_wraps = [ wrap ];
};

Robot R3 = {
        kind = "R103";
        pop_model = { pop_distr = popUnif(); };
        recurrence = 55% / SimpleContent.cachable; // adjusted to get 55% DHR
        origins = S.addresses;       // where the origin servers are

        MimeHeader user4 = 'ELASTICA_MAGIC_COOKIE: 426186983820:stresstest.user4@elastica.co';
        //MimeHeader user3 = 'ELASTICA_MAGIC_COOKIE: 494:stresstest.user3@elastica.co';
        http_headers = [user4: 100%];
        addresses = ['10.0.0.254' ** 25 ]; // where these robot agents will be created
        dns_resolver = dr;
        ssl_wraps = [ wrap ];
};

Robot R4 = {
        kind = "R103";
        pop_model = { pop_distr = popUnif(); };
        recurrence = 55% / SimpleContent.cachable; // adjusted to get 55% DHR
        origins = S.addresses;       // where the origin servers are

        MimeHeader user5 = 'ELASTICA_MAGIC_COOKIE: 426186983820:stresstest.user5@elastica.co';
        http_headers = [user5: 100%];
        addresses = ['10.0.0.254' ** 25 ]; // where these robot agents will be created
        dns_resolver = dr;
        ssl_wraps = [ wrap ];
};

Phase phRampUp = { name = "rampup"; goal.duration = 10min; populus_factor_beg = 0; populus_factor_end = 1;};
Phase phRampDown = { name = "rampdown"; goal.duration = 10min; populus_factor_beg = 1; populus_factor_end = 0;};
Phase phSustain = { name = "sustain"; goal.duration = 60min; populus_factor_beg = 1; populus_factor_end = 1;};


// build schedule using some well-known phases and phases defined above
schedule(phRampUp, 
         phSustain); 
//         phRampDown);
//schedule(phSustain);



use(M);
//use(S, R);
use(S, R, R1, R2, R3, R4);

